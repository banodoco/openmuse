
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ujlwuvkrxlvoswwkerdf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVqbHd1dmtyeGx2b3N3d2tlcmRmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3ODM1MDYsImV4cCI6MjA1NzM1OTUwNn0.htwJHr4Z4NlMZYVrH1nNGkU53DyBTWgMeOeUONYFy_4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: typeof window !== 'undefined' ? localStorage : undefined,
  }
});

// Log initialization for debugging
console.log('Supabase client initialized with auth configuration:', {
  persistSession: true,
  autoRefreshToken: true,
  detectSessionInUrl: true,
  storage: 'localStorage',
});

// Check if the videos bucket exists but don't try to create it
// This fixes the "maximum allowed size" error
export const checkVideoBucket = async () => {
  try {
    const { data: buckets } = await supabase.storage.listBuckets();
    const videoBucket = buckets?.find(bucket => bucket.name === 'videos');
    
    if (!videoBucket) {
      console.log('Videos bucket does not exist. Please create it in the Supabase dashboard.');
    } else {
      console.log('Videos bucket exists');
    }
  } catch (error) {
    console.error('Error checking if videos bucket exists:', error);
  }
};

// Call this function to check the bucket exists (during app initialization)
if (typeof window !== 'undefined') {
  checkVideoBucket().catch(console.error);
}
