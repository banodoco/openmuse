# Project Overview: Video Response Generator

This document provides a high-level overview of the `video-response-generator` project based on an initial code exploration.

## Tech Stack

*   **Frontend:** React with TypeScript
*   **UI Framework:** Tailwind CSS with shadcn/ui components (built on Radix UI)
*   **Build Tool:** Vite
*   **Backend/BaaS:** Supabase (for authentication, database, and potentially storage)
*   **Data Fetching/State Management:** React Query (`@tanstack/react-query`)
*   **Routing:** React Router (`react-router-dom`)
*   **Linting:** ESLint
*   **Styling:** PostCSS, Tailwind CSS

## Application Structure

*   Modern React application using functional components and hooks.
*   Component-based architecture.
*   Lazy loading (`React.lazy` and `Suspense`) is used for code splitting and improved performance.
*   Organized directory structure:
    *   `src/components`: Reusable UI components (likely leveraging shadcn/ui).
    *   `src/pages`: Components corresponding to different application routes.
    *   `src/providers`: React Context providers (e.g., `AuthProvider` for managing authentication state).
    *   `src/hooks`: Custom React hooks for reusable logic.
    *   `src/lib`: Utility functions, helper modules (e.g., `utils.ts`).
    *   `src/integrations`: Code related to integrating with external services, specifically Supabase.
    *   `src/contexts`: Additional context definitions if needed.
    *   `public/`: Static assets served directly.
*   Configuration files for TypeScript (`tsconfig.*.json`), Tailwind (`tailwind.config.ts`), Vite (`vite.config.ts`), PostCSS (`postcss.config.js`), and ESLint (`eslint.config.js`).

## Key Features

*   **User Authentication:** Handled via Supabase (`AuthProvider`, `/auth`, `/auth/callback` routes).
*   **File Upload:** Functionality likely present in the `/upload` route.
*   **Video Management:** Viewing and potentially managing video content (`/videos/:id`).
*   **Asset Management:** Handling various assets, including specific LoRA assets (`/assets/:id`, `/assets/loras/:id`). This might suggest AI/ML model integration.
*   **Admin Interface:** Dedicated section for administrative tasks (`/admin`).
*   **User Profiles:** Section for user-specific information (`/profile`).
*   **UI Feedback:** Uses `Toaster` components (likely from `sonner` or `@/components/ui/toaster`) for notifications.

## Main Routes

*   `/`: Home Page
*   `/upload`: Upload Interface
*   `/admin`: Admin Dashboard
*   `/auth`: Authentication Pages
*   `/auth/callback`: Supabase Auth Callback Handler
*   `/videos/:id`: View Individual Video
*   `/assets/:id`: View Asset Details
*   `/assets/loras/:id`: View LoRA Asset Details
*   `/profile`: User Profile Page

## Development Environment

*   Managed by `package.json` (likely using `npm` or `bun` based on `bun.lockb`).
*   Scripts for development (`dev`), building (`build`), linting (`lint`), and previewing (`preview`).
*   Uses Vite for fast development server and optimized production builds.
*   Strong typing enforced by TypeScript. 